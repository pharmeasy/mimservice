{% if configmap is defined %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ prefix }}-{{ project_name }}-configmap"
  namespace: "{{ namespace }}"
data:
{% for key, value in configmap.items() %}
  {{ key }}: "{{ value }}"
{% endfor %}
{% endif %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ prefix }}-{{ project_name }}-deployment"
  namespace: "{{ namespace }}"
  labels:
    k8s-app: "{{ prefix }}-{{ project_name }}"
spec:
  progressDeadlineSeconds: 60
  revisionHistoryLimit: 1
  replicas: {{ min_replicas }}
  selector:
    matchLabels:
      k8s-app: "{{ prefix }}-{{ project_name }}"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  template:
    metadata:
      labels:
        k8s-app: "{{ prefix }}-{{ project_name }}"
    spec:
      containers:
        - name: {{ project_name }}
          image: "013764772854.dkr.ecr.ap-south-1.amazonaws.com/{{ project_name }}:{{ tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ configmap.GRPC_PORT }}
              name: metrics
              protocol: TCP
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /healthcheck
              port: {{ configmap.GRPC_PORT }}
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthcheck
              port: {{ configmap.GRPC_PORT }}
            initialDelaySeconds: 20
            periodSeconds: 8
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 150m
              memory: 256Mi
          envFrom:
{% if configmap is defined %}
            - configMapRef:
                name: "{{ prefix }}-{{ project_name }}-configmap"
{% endif %}
            - secretRef:
                name: "{{ prefix }}-{{ project_name }}"
      nodeSelector:
        workloadType: general
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ prefix }}-{{ project_name }}-service"
  namespace: "{{ namespace }}"
  labels:
    k8s-svc: "{{ prefix }}-{{ project_name }}"
spec:
  ports:
    - name: lms
      port: {{ configmap.GRPC_PORT }}
      targetPort: {{ configmap.GRPC_PORT }}
      protocol: TCP
  selector:
    k8s-app: "{{ prefix }}-{{ project_name }}"
  type: ClusterIP
---
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  name: "{{ prefix }}-{{ project_name }}-mapping"
  namespace: "{{ namespace }}"
spec:
  bypass_auth: true
  host: "{{ fqdn }}"
  prefix: /
  rewrite: ""
  service: "{{ prefix }}-{{ project_name }}-service.{{ namespace }}:{{ configmap.GRPC_PORT }}"
  timeout_ms: 5000
{% if public_fqdn is defined %}
---
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  name: "{{ prefix }}-{{ project_name }}-public-mapping"
  namespace: "{{ namespace }}"
spec:
  bypass_auth: true
  host: "{{ public_fqdn }}"
  prefix: /
  rewrite: ""
  service: "{{ prefix }}-{{ project_name }}-service.{{ namespace }}:{{ configmap.GRPC_PORT }}"
  timeout_ms: 5000
{% endif %}
---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta1
metadata:
  name: "{{ prefix }}-{{ project_name }}-hpa"
  namespace: {{ namespace }}
spec:
  scaleTargetRef:
    kind: Deployment
    name: "{{ prefix }}-{{ project_name }}-deployment"
    apiVersion: apps/v1
  minReplicas: {{ min_replicas }}
  maxReplicas: {{ max_replicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80